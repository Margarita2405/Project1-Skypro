from typing import Any, Dict, List, Tuple

import pytest


# Фикстура для для создания входных данных для тестов
@pytest.fixture
def standard_card_numbers() -> Dict[str, str]:
    """Фикстура со стандартными номерами банковских карт для тестирования"""
    return {
        "standard": "5946823031801656",
        "visa_16": "3111111111111116",
        "mastercard_16": "4275342222228016",
        "amex_15": "533333333333315",
        "diners_14": "61111111111114",
        "old_visa_13": "7111111111113",
        "union_pay_19": "8111111111111111119",
    }


@pytest.fixture
def edge_case_card_numbers() -> Dict[str, str]:
    """Фикстура с граничными случаями для тестирования"""
    return {
        "min_length_12": "123456789012",
        "short_10": "1234567890",
        "zeros": "0000000000000000",
        "repeating_digits": "1111111111111111",
    }


# Фикстура с тестовыми номерами счетов
@pytest.fixture
def account_samples() -> Dict[str, str]:
    """Фикстура с номерами счетов для тестирования"""
    return {
        "standard_20": "40817810207005367456",
        "short_10": "1234567890",
        "long_25": "1234567890123456789012345",
        "minimal_4": "1234",
        "zeros": "00000000000000000000",
        "repeating_digits": "11111111111111111111",
    }


# Фикстуры для тестовых данных
@pytest.fixture
def valid_card_examples() -> List[str]:
    """Фикстура с валидными примерами карт разных типов"""
    return [
        "Visa Platinum 7000792289606361",
        "Maestro 1596837868705199",
        "MasterCard 7158300734726758",
        "Visa Classic 6831982476737658",
        "Visa Platinum 8990922113665229",
        "Visa Gold 5999414228426353",
    ]


@pytest.fixture
def valid_account_examples() -> List[str]:
    """Фикстура с валидными примерами счетов"""
    return ["Счет 73654108430135874305", "Счет 64686473678894779589", "Счет 35383033474447895560"]


@pytest.fixture
def invalid_input_examples() -> List[Tuple[str, str]]:
    """Фикстура с некорректными входными данными и ожидаемыми ошибками"""
    return [
        # (input_data, expected_error_message)
        ("VisaPlatinum7000792289606361", "Некорректный формат строки"),
        ("", "Некорректный формат строки"),
        ("Счет", "Некорректный формат строки"),
        ("Visa Platinum 7000abc89606361", "Некорректный ввод, номер должен состоять только из цифр"),
        ("Счет 7365410843abc5874305", "Некорректный ввод, номер должен состоять только из цифр"),
        ("Счет 1234567890123456789", "Некорректный ввод, номер счета слишком короткий"),  # 19 цифр
        ("Visa Platinum 123456789012345", "Некорректный ввод, номер карты слишком короткий"),  # 15 цифр
    ]


@pytest.fixture
def sample_dates() -> List[Tuple[str, str]]:
    """Фикстура с примерами дат для тестирования"""
    return [
        ("2024-03-11T02:26:18.671407", "11.03.2024"),
        ("2025-07-23T10:45:34.256130", "23.07.2025"),
        ("2000-01-01T00:00:00.000000", "01.01.2000"),
    ]


@pytest.fixture
def sample_operations() -> List[Dict[str, Any]]:
    """Фикстура с примерами операций для тестирования"""
    return [
        {"id": 41428829, "state": "EXECUTED", "date": "2019-07-03T18:35:29.512364"},
        {"id": 939719570, "state": "EXECUTED", "date": "2018-06-30T02:08:58.425572"},
        {"id": 594226727, "state": "CANCELED", "date": "2018-09-12T21:27:25.241689"},
        {"id": 615064591, "state": "CANCELED", "date": "2018-10-14T08:21:33.419441"},
    ]


# Фикстура с тестовыми данными
@pytest.fixture
def samples_operations() -> List[Dict[str, Any]]:
    """Фикстура с примерами операций для тестирования"""
    return [
        {"id": 41428829, "state": "EXECUTED", "date": "2019-07-03T18:35:29.512364"},
        {"id": 939719570, "state": "EXECUTED", "date": "2018-06-30T02:08:58.425572"},
        {"id": 594226727, "state": "CANCELED", "date": "2018-09-12T21:27:25.241689"},
        {"id": 615064591, "state": "CANCELED", "date": "2018-10-14T08:21:33.419441"},
    ]


# Фикстура с операциями с одинаковыми датами
@pytest.fixture
def operations_with_same_dates() -> List[Dict[str, Any]]:
    """Фикстура с операциями, содержащими одинаковые даты"""
    return [
        {"id": 1, "state": "EXECUTED", "date": "2023-01-15T10:30:00.000000"},
        {"id": 2, "state": "CANCELED", "date": "2023-01-15T10:30:00.000000"},
        {"id": 3, "state": "EXECUTED", "date": "2023-01-15T10:30:00.000000"},
        {"id": 4, "state": "PENDING", "date": "2022-05-20T14:25:00.000000"},
    ]
